"""Typing stubs for pegl.surface"""

# Standard library imports.
from typing import Any, Optional

# Local imports.
from .config import Config
from .display import Display
from .enums import (MultisampleResolve, RenderBuffer, SwapBehavior,
                    TextureFormat, TextureTarget)

class Surface:
    def __init__(self, display: Display, handle: Any) -> None: ...

    def __del__(self) -> None: ...

    def bind_tex_image(self, buffer: RenderBuffer=...) -> None: ...

    def copy_buffers(self, target: int) -> None: ...

    def release_tex_image(self, buffer: RenderBuffer=...) -> None: ...

    def swap_buffers(self, target: int) -> None: ...

    @property
    def config(self) -> Config: ...

    @property
    def config_id(self) -> int: ...

    @property
    def height(self) -> int: ...

    @property
    def horizontal_resolution(self) -> Optional[float]: ...

    @property
    def largest_pbuffer(self) -> bool: ...

    @property
    def mipmap_level(self) -> int: ...
    @mipmap_level.setter
    def mipmap_level(self, level: int) -> None: ...

    @property
    def mipmap_texture(self) -> bool: ...

    @property
    def multisample_resolve(self) -> MultisampleResolve: ...
    @multisample_resolve.setter
    def multisample_resolve(self, method: MultisampleResolve) -> None: ...

    @property
    def pixel_aspect_ratio(self) -> Optional[float]: ...

    @property
    def render_buffer(self) -> RenderBuffer: ...

    @property
    def swap_behavior(self) -> SwapBehavior: ...

    @property
    def texture_format(self) -> Optional[TextureFormat]: ...

    @property
    def texture_target(self) -> Optional[TextureTarget]: ...

    @property
    def vertical_resolution(self) -> Optional[float]: ...

    @property
    def width(self) -> int: ...
